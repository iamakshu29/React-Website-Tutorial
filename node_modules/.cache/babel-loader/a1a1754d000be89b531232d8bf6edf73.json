{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _parser = _interopRequireDefault(require(\"./parser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar Processor = /*#__PURE__*/function () {\n  function Processor(func, options) {\n    this.func = func || function noop() {};\n\n    this.funcRes = null;\n    this.options = options;\n  }\n\n  var _proto = Processor.prototype;\n\n  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.updateSelector === false) {\n      return false;\n    } else {\n      return typeof rule !== \"string\";\n    }\n  };\n\n  _proto._isLossy = function _isLossy(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.lossless === false) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto._root = function _root(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var parser = new _parser[\"default\"](rule, this._parseOptions(options));\n    return parser.root;\n  };\n\n  _proto._parseOptions = function _parseOptions(options) {\n    return {\n      lossy: this._isLossy(options)\n    };\n  };\n\n  _proto._run = function _run(rule, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      try {\n        var root = _this._root(rule, options);\n\n        Promise.resolve(_this.func(root)).then(function (transform) {\n          var string = undefined;\n\n          if (_this._shouldUpdateSelector(rule, options)) {\n            string = root.toString();\n            rule.selector = string;\n          }\n\n          return {\n            transform: transform,\n            root: root,\n            string: string\n          };\n        }).then(resolve, reject);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  };\n\n  _proto._runSync = function _runSync(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var root = this._root(rule, options);\n\n    var transform = this.func(root);\n\n    if (transform && typeof transform.then === \"function\") {\n      throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n    }\n\n    var string = undefined;\n\n    if (options.updateSelector && typeof rule !== \"string\") {\n      string = root.toString();\n      rule.selector = string;\n    }\n\n    return {\n      transform: transform,\n      root: root,\n      string: string\n    };\n  }\n  /**\n   * Process rule into a selector AST.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.ast = function ast(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.root;\n    });\n  }\n  /**\n   * Process rule into a selector AST synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {parser.Root} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.astSync = function astSync(rule, options) {\n    return this._runSync(rule, options).root;\n  }\n  /**\n   * Process a selector into a transformed value asynchronously\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<any>} The value returned by the processor.\n   */\n  ;\n\n  _proto.transform = function transform(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.transform;\n    });\n  }\n  /**\n   * Process a selector into a transformed value synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {any} The value returned by the processor.\n   */\n  ;\n\n  _proto.transformSync = function transformSync(rule, options) {\n    return this._runSync(rule, options).transform;\n  }\n  /**\n   * Process a selector into a new selector string asynchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.process = function process(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.string || result.root.toString();\n    });\n  }\n  /**\n   * Process a selector into a new selector string synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.processSync = function processSync(rule, options) {\n    var result = this._runSync(rule, options);\n\n    return result.string || result.root.toString();\n  };\n\n  return Processor;\n}();\n\nexports[\"default\"] = Processor;\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/Akshat Verma/Desktop/Practice/react/react_tut/node_modules/postcss-selector-parser/dist/processor.js"],"names":["exports","__esModule","_parser","_interopRequireDefault","require","obj","Processor","func","options","noop","funcRes","_proto","prototype","_shouldUpdateSelector","rule","merged","Object","assign","updateSelector","_isLossy","lossless","_root","parser","_parseOptions","root","lossy","_run","_this","Promise","resolve","reject","then","transform","string","undefined","toString","selector","e","_runSync","Error","ast","result","astSync","transformSync","process","processSync","module","default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _parser = _interopRequireDefault(require(\"./parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Processor = /*#__PURE__*/function () {\n  function Processor(func, options) {\n    this.func = func || function noop() {};\n\n    this.funcRes = null;\n    this.options = options;\n  }\n\n  var _proto = Processor.prototype;\n\n  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.updateSelector === false) {\n      return false;\n    } else {\n      return typeof rule !== \"string\";\n    }\n  };\n\n  _proto._isLossy = function _isLossy(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var merged = Object.assign({}, this.options, options);\n\n    if (merged.lossless === false) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto._root = function _root(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var parser = new _parser[\"default\"](rule, this._parseOptions(options));\n    return parser.root;\n  };\n\n  _proto._parseOptions = function _parseOptions(options) {\n    return {\n      lossy: this._isLossy(options)\n    };\n  };\n\n  _proto._run = function _run(rule, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      try {\n        var root = _this._root(rule, options);\n\n        Promise.resolve(_this.func(root)).then(function (transform) {\n          var string = undefined;\n\n          if (_this._shouldUpdateSelector(rule, options)) {\n            string = root.toString();\n            rule.selector = string;\n          }\n\n          return {\n            transform: transform,\n            root: root,\n            string: string\n          };\n        }).then(resolve, reject);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  };\n\n  _proto._runSync = function _runSync(rule, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var root = this._root(rule, options);\n\n    var transform = this.func(root);\n\n    if (transform && typeof transform.then === \"function\") {\n      throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n    }\n\n    var string = undefined;\n\n    if (options.updateSelector && typeof rule !== \"string\") {\n      string = root.toString();\n      rule.selector = string;\n    }\n\n    return {\n      transform: transform,\n      root: root,\n      string: string\n    };\n  }\n  /**\n   * Process rule into a selector AST.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.ast = function ast(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.root;\n    });\n  }\n  /**\n   * Process rule into a selector AST synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {parser.Root} The AST of the selector after processing it.\n   */\n  ;\n\n  _proto.astSync = function astSync(rule, options) {\n    return this._runSync(rule, options).root;\n  }\n  /**\n   * Process a selector into a transformed value asynchronously\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<any>} The value returned by the processor.\n   */\n  ;\n\n  _proto.transform = function transform(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.transform;\n    });\n  }\n  /**\n   * Process a selector into a transformed value synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {any} The value returned by the processor.\n   */\n  ;\n\n  _proto.transformSync = function transformSync(rule, options) {\n    return this._runSync(rule, options).transform;\n  }\n  /**\n   * Process a selector into a new selector string asynchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.process = function process(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.string || result.root.toString();\n    });\n  }\n  /**\n   * Process a selector into a new selector string synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n  ;\n\n  _proto.processSync = function processSync(rule, options) {\n    var result = this._runSync(rule, options);\n\n    return result.string || result.root.toString();\n  };\n\n  return Processor;\n}();\n\nexports[\"default\"] = Processor;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}