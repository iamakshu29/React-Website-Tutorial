{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshat Verma\\\\Desktop\\\\Practice\\\\react\\\\react_tut\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const defaultName = \"user\";\n  const [fname, upName] = useState(defaultName);\n  const [updatedname, setFullName] = useState(\" \");\n\n  const inputEvent = event => {\n    // console.log(event.target.value);\n    upName(event.target.value);\n  };\n\n  const display = () => {\n    setFullName(fname);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello \", updatedname]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter your name\",\n      onChange: inputEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: display,\n      children: \"Click Me!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"PcAlzJTQb/Cn2msp2CRvhwOTU0w=\");\n\n_c = App;\nexport default App; // use camelCase while declaring events like onClick onMouseEnter onDoubleClick  \n// and don't add () after the function name while calling the function in events \n// use hooks while changing the state with events ...\n// here we have to understand that the form element like input field, textarea select are all controlled components \n// ie the value inside these element is controlled by react not by these element like in javaScript\n// the simple meaning of above lines are :- we can't grab the value of these element by simply using \n//* <element>.value syntax (input.value)  like we did in javaScript\n//* we have to use the onchange event handler in input tag,  which grab the value by using event.target.value\n//* and to grab that value we need hooks();\n// only then we can use the value in other places like we did above \n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Akshat Verma/Desktop/Practice/react/react_tut/src/App.jsx"],"names":["React","useState","App","defaultName","fname","upName","updatedname","setFullName","inputEvent","event","target","value","display"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAMC,WAAW,GAAG,MAApB;AACA,QAAM,CAACC,KAAD,EAAQC,MAAR,IAAkBJ,QAAQ,CAACE,WAAD,CAAhC;AACA,QAAM,CAACG,WAAD,EAAcC,WAAd,IAA6BN,QAAQ,CAAC,GAAD,CAA3C;;AAEA,QAAMO,UAAU,GAAIC,KAAD,IAAW;AAC1B;AACAJ,IAAAA,MAAM,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAN;AACH,GAHD;;AAKA,QAAMC,OAAO,GAAG,MAAI;AAChBL,IAAAA,WAAW,CAACH,KAAD,CAAX;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI;AAAA,2BAAWE,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,WAAW,EAAC,iBAA/B;AAAkD,MAAA,QAAQ,EAAEE;AAA5D;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAII,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAOH,CArBD;;GAAMV,G;;KAAAA,G;AAwBN,eAAeA,GAAf,C,CAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst App = () => {\r\n    const defaultName = \"user\";\r\n    const [fname, upName] = useState(defaultName);\r\n    const [updatedname, setFullName] = useState(\" \");\r\n\r\n    const inputEvent = (event) => {\r\n        // console.log(event.target.value);\r\n        upName(event.target.value);\r\n    }\r\n\r\n    const display = ()=>{\r\n        setFullName(fname);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>Hello {updatedname}</h1>\r\n            <input type='text' placeholder=\"Enter your name\"  onChange={inputEvent} />\r\n            <button type='submit' onClick = {display} >Click Me!!</button>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default App;\r\n\r\n\r\n// use camelCase while declaring events like onClick onMouseEnter onDoubleClick  \r\n// and don't add () after the function name while calling the function in events \r\n// use hooks while changing the state with events ...\r\n\r\n\r\n// here we have to understand that the form element like input field, textarea select are all controlled components \r\n// ie the value inside these element is controlled by react not by these element like in javaScript\r\n\r\n// the simple meaning of above lines are :- we can't grab the value of these element by simply using \r\n//* <element>.value syntax (input.value)  like we did in javaScript\r\n//* we have to use the onchange event handler in input tag,  which grab the value by using event.target.value\r\n//* and to grab that value we need hooks();\r\n\r\n// only then we can use the value in other places like we did above "]},"metadata":{},"sourceType":"module"}