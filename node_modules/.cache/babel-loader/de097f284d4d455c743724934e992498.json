{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshat Verma\\\\Desktop\\\\Practice\\\\react\\\\react_tut\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\n// Hooks Introduction   Intoduced in v16\n//* Hooks are nothing but a kind a function which can terminate the use of classes\n// make the code simpler\n//! does not work inside classes \n//* should always be used at the top\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  let newTime = new Date().toLocaleTimeString();\n  const [ctime, setCount] = useState(newTime);\n\n  const IncNum = () => {\n    newTime = new Date().toLocaleTimeString();\n    setCount(newTime);\n  };\n\n  setInterval(IncNum, 1000);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: ctime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"ebOqrHbJMKD5pt8Ewf5LpGIWARY=\");\n\n_c = App;\nexport default App; // useState() function is an array which return two items useState[current Data, Updated Data];\n// the value inside useState(3) function is called initial data =>  useState(initialData);\n// Syntax => const state = useState();\n// After Object destructuring =>\n// const [count,setCount] = useState(5);\n// the value of initialData is passed to currentData\n// here 5 is initialData and count is currentData and setCount is a function or Updated Data\n// what we did upwards :-\n// we simply initialize the state with 0 and the current data here it is count will take the \n// initial Data ie 0 automatically at first .....so current Data ie count = 0 \n// then we use the second element of array ie we use a function setCount \n// the value passed in the updated Data or in the function becomes the current Data ie the value of count is equal to updated date of the array..\n// thats why we call the setCount() function and in func we increment count value by 1\n// so when ever we call the IncNum() function the value updated and become the current value and display the update value\n// we can also apply if else conditions in hooks\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Akshat Verma/Desktop/Practice/react/react_tut/src/App.jsx"],"names":["React","useState","App","newTime","Date","toLocaleTimeString","ctime","setCount","IncNum","setInterval"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,MAAKC,OAAO,GAAG,IAAIC,IAAJ,GAAWC,kBAAX,EAAf;AACA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBN,QAAQ,CAACE,OAAD,CAAjC;;AAEA,QAAMK,MAAM,GAAG,MAAI;AACfL,IAAAA,OAAO,GAAG,IAAIC,IAAJ,GAAWC,kBAAX,EAAV;AACAE,IAAAA,QAAQ,CAACJ,OAAD,CAAR;AACH,GAHD;;AAKAM,EAAAA,WAAW,CAAED,MAAF,EAAW,IAAX,CAAX;AAEA,sBACI;AAAA,2BACI;AAAA,gBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAKH,CAhBD;;GAAMJ,G;;KAAAA,G;AAkBN,eAAeA,GAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA","sourcesContent":["// Hooks Introduction   Intoduced in v16\r\n//* Hooks are nothing but a kind a function which can terminate the use of classes\r\n// make the code simpler\r\n//! does not work inside classes \r\n//* should always be used at the top\r\n\r\nimport React, {useState} from 'react';\r\nconst App = () => {\r\n    let  newTime = new Date().toLocaleTimeString();\r\n    const [ctime,setCount] = useState(newTime);\r\n\r\n    const IncNum = ()=>{\r\n        newTime = new Date().toLocaleTimeString();\r\n        setCount(newTime);\r\n    };\r\n\r\n    setInterval((IncNum), 1000);\r\n\r\n    return (\r\n        <>\r\n            <h1>{ctime}</h1>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n// useState() function is an array which return two items useState[current Data, Updated Data];\r\n// the value inside useState(3) function is called initial data =>  useState(initialData);\r\n// Syntax => const state = useState();\r\n// After Object destructuring =>\r\n// const [count,setCount] = useState(5);\r\n// the value of initialData is passed to currentData\r\n\r\n// here 5 is initialData and count is currentData and setCount is a function or Updated Data\r\n\r\n\r\n// what we did upwards :-\r\n// we simply initialize the state with 0 and the current data here it is count will take the \r\n// initial Data ie 0 automatically at first .....so current Data ie count = 0 \r\n// then we use the second element of array ie we use a function setCount \r\n// the value passed in the updated Data or in the function becomes the current Data ie the value of count is equal to updated date of the array..\r\n// thats why we call the setCount() function and in func we increment count value by 1\r\n// so when ever we call the IncNum() function the value updated and become the current value and display the update value\r\n\r\n\r\n// we can also apply if else conditions in hooks"]},"metadata":{},"sourceType":"module"}