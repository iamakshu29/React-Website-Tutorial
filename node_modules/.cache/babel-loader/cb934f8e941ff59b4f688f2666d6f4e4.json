{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshat Verma\\\\Desktop\\\\Practice\\\\react\\\\react_tut\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [fullName, setFullName] = useState({\n    fName: \"\",\n    lName: \"\"\n  });\n\n  const inputEvent = event => {\n    // console.log(event.target.value);\n    const value = event.target.value;\n    const name = event.target.name;\n    setFullName(prevValue => {\n      if (name === 'fName') {\n        return {\n          fName: value,\n          lName: prevValue.lName\n        };\n      } else if (name === 'lName') {\n        return {\n          fName: prevValue.fName,\n          lName: value\n        };\n      }\n    });\n  }; //*                    Explaination of inputEvent()\n  // what we do in this func is, we just grab the value of two attribute 1. value of input element and 2. name of input element\n  // in if-else condition, we check if the name contains 'fname'  then we set the value of fName only in useState() and gives lName its prevValue by returning the object\n  // and vice-versa if name contains 'lName'\n\n\n  const displayName = event => {\n    event.preventDefault();\n  }; // to prevent the default behaviour of refresh page after submits the data we use event.preventDefault();\n  // coz of this page doesnot refresh\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello \", fullName.fName, \" \", fullName.lName, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: displayName,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"fName\",\n        placeholder: \"Enter your name\",\n        onChange: inputEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"lName\",\n        placeholder: \"Enter your last name\",\n        onChange: inputEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Enter your Email-id\",\n        onChange: inputEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Enter your Phone Number\",\n        onChange: inputEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Click Me !!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"z/sKM6SfQ7cUXqw4eUq2VmJm5xU=\");\n\n_c = App;\nexport default App; // Handling complex Multiple Input\n//! First Change\n// what we do here is, we make an object in useState(), so that we can take multiple values in single useState(),  instead of making multiple useState()....everytime we need to change a state\n// when we use objects in useState(), then during the updation of any value ie setName() func.... we have to update the whole object, \n// if we did not want to do so then, we easily return the prevValue to that key which we don't want to update..\n//* Like we did above in if-else loop we update one of the names ie fName or lName and return the other with its prevValue but we return the whole object\n//! Second Change\n// AND we also place the value of all input in a single function to reduce the code \n//! Third Change (i think we use prevValue only when we use objects)\n// we also use a function inside the UpdatedState() or setState() and pass a parameter into it..... \n// which can take the prevValue of initialState like prevValue.fName give the prevValue which is blank ie \" \"\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Akshat Verma/Desktop/Practice/react/react_tut/src/App.jsx"],"names":["React","useState","App","fullName","setFullName","fName","lName","inputEvent","event","value","target","name","prevValue","displayName","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC;AACrCI,IAAAA,KAAK,EAAE,EAD8B;AAErCC,IAAAA,KAAK,EAAE;AAF8B,GAAD,CAAxC;;AAKA,QAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1B;AACA,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACA,UAAME,IAAI,GAAGH,KAAK,CAACE,MAAN,CAAaC,IAA1B;AACAP,IAAAA,WAAW,CAAEQ,SAAD,IAAe;AACvB,UAAID,IAAI,KAAK,OAAb,EAAsB;AAClB,eAAQ;AACJN,UAAAA,KAAK,EAAEI,KADH;AAEJH,UAAAA,KAAK,EAAEM,SAAS,CAACN;AAFb,SAAR;AAIH,OALD,MAMK,IAAIK,IAAI,KAAK,OAAb,EAAsB;AACvB,eAAQ;AACJN,UAAAA,KAAK,EAAEO,SAAS,CAACP,KADb;AAEJC,UAAAA,KAAK,EAAEG;AAFH,SAAR;AAIH;AACJ,KAbU,CAAX;AAcH,GAlBD,CANc,CA0Bd;AACA;AACA;AACA;;;AAEA,QAAMI,WAAW,GAAIL,KAAD,IAAW;AAC3BA,IAAAA,KAAK,CAACM,cAAN;AACH,GAFD,CA/Bc,CAoCd;AACA;;;AAKA,sBACI;AAAA,4BACI;AAAA,2BAAWX,QAAQ,CAACE,KAApB,OAA4BF,QAAQ,CAACG,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAM,MAAA,QAAQ,EAAEO,WAAhB;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,WAAW,EAAC,iBAA5C;AAA8D,QAAA,QAAQ,EAAEN;AAAxE;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,WAAW,EAAC,sBAA5C;AAAmE,QAAA,QAAQ,EAAEA;AAA7E;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,WAAW,EAAC,qBAAhC;AAAsD,QAAA,QAAQ,EAAEA;AAAhE;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,WAAW,EAAC,yBAAjC;AAA2D,QAAA,QAAQ,EAAEA;AAArE;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAYH,CAtDD;;GAAML,G;;KAAAA,G;AAyDN,eAAeA,GAAf,C,CAGA;AACC;AACD;AACA;AACA;AACA;AAGC;AACD;AAEA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst App = () => {\r\n    const [fullName, setFullName] = useState({\r\n        fName: \"\",\r\n        lName: \"\"\r\n    });\r\n\r\n    const inputEvent = (event) => {\r\n        // console.log(event.target.value);\r\n        const value = event.target.value;\r\n        const name = event.target.name;\r\n        setFullName((prevValue) => {\r\n            if (name === 'fName') {\r\n                return ({\r\n                    fName: value,\r\n                    lName: prevValue.lName\r\n                });\r\n            }\r\n            else if (name === 'lName') {\r\n                return ({\r\n                    fName: prevValue.fName,\r\n                    lName: value\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    //*                    Explaination of inputEvent()\r\n    // what we do in this func is, we just grab the value of two attribute 1. value of input element and 2. name of input element\r\n    // in if-else condition, we check if the name contains 'fname'  then we set the value of fName only in useState() and gives lName its prevValue by returning the object\r\n    // and vice-versa if name contains 'lName'\r\n\r\n    const displayName = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n\r\n    // to prevent the default behaviour of refresh page after submits the data we use event.preventDefault();\r\n    // coz of this page doesnot refresh\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>Hello {fullName.fName} {fullName.lName} </h1>\r\n            <form onSubmit={displayName} >\r\n                <input type='text' name='fName' placeholder=\"Enter your name\" onChange={inputEvent} />\r\n                <input type='text' name='lName' placeholder=\"Enter your last name\" onChange={inputEvent} />\r\n                <input type='email' placeholder=\"Enter your Email-id\" onChange={inputEvent} />\r\n                <input type='number' placeholder=\"Enter your Phone Number\" onChange={inputEvent} />\r\n                <button type='submit' >Click Me !!</button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default App;\r\n\r\n\r\n// Handling complex Multiple Input\r\n //! First Change\r\n// what we do here is, we make an object in useState(), so that we can take multiple values in single useState(),  instead of making multiple useState()....everytime we need to change a state\r\n// when we use objects in useState(), then during the updation of any value ie setName() func.... we have to update the whole object, \r\n// if we did not want to do so then, we easily return the prevValue to that key which we don't want to update..\r\n//* Like we did above in if-else loop we update one of the names ie fName or lName and return the other with its prevValue but we return the whole object\r\n\r\n\r\n //! Second Change\r\n// AND we also place the value of all input in a single function to reduce the code \r\n\r\n//! Third Change (i think we use prevValue only when we use objects)\r\n// we also use a function inside the UpdatedState() or setState() and pass a parameter into it..... \r\n// which can take the prevValue of initialState like prevValue.fName give the prevValue which is blank ie \" \""]},"metadata":{},"sourceType":"module"}