{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshat Verma\\\\Desktop\\\\Practice\\\\react\\\\react_tut\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [fullName, setFullName] = useState({\n    fName: \"\",\n    lName: \"\",\n    email: \"\",\n    phone: \"\"\n  });\n\n  const inputEvent = event => {\n    // console.log(event.target.value);\n    // const value = event.target.value;\n    // const name = event.target.name;\n    const {\n      value,\n      name\n    } = event.target; // just like we do array destructuring we can also do object destructuring but here then names remain same ie we cant do valuee or naame \n\n    setFullName(prevValue => {\n      return { ...prevValue,\n        [name]: value\n      }; //! This is short form of below long code \n      //* In first line\n      //* In ...preValue :-   ... means spreadOperator \n      // spreadOperator gives the complete value inside that object or array (it works on both)\n      // As we know prevValue also contain all the value of object fullName so we use ...prevValue\n      // this line helps us to write the return again and again \n      //* now for 2nd line\n      //* [name]:value (i didn't undrstnd this exactly)\n      //but this lines do the work of if else condition and after if condition satisfies update the value\n      // of particular key and send prevValue to rest..\n      //! Note :- we only need to add only these 2 lines no matter how many input elements are there\n      //! we just need to add an extra input element and a tag to show the vlaue of that element\n      //! like in h1 we so {fullName.fname}\n      // if (name === 'fName') {\n      //     return ({\n      //         fName: value,\n      //         lName: prevValue.lName,\n      //         email: prevValue.email,\n      //         phone: prevValue.phone\n      //     });\n      // }\n      // else if (name === 'lName') {\n      //     return ({\n      //         fName: prevValue.fName,\n      //         lName: value,\n      //         email: prevValue.email,\n      //         phone: prevValue.phone\n      //     });\n      // }\n      // else if (name === 'email') {\n      //     return ({\n      //         fName: prevValue.fName,\n      //         lName: prevValue.lName,\n      //         email: value,\n      //         phone: prevValue.phone\n      //     });\n      // }\n      // else if (name === 'phone') {\n      //     return ({\n      //         fName: prevValue.fName,\n      //         lName: prevValue.lName,\n      //         email: prevValue.email,\n      //         phone: value\n      //     });\n      // }\n    });\n  };\n\n  const displayName = event => {\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello \", fullName.fName, \" \", fullName.lName, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", fullName.email, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", fullName.phone, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: displayName,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"fName\",\n        placeholder: \"Enter your name\",\n        onChange: inputEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"lName\",\n        placeholder: \"Enter your last name\",\n        onChange: inputEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Enter your Email-id\",\n        onChange: inputEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"phone\",\n        placeholder: \"Enter your Phone Number\",\n        onChange: inputEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Click Me !!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"PaoqU861oz+bpN4cwDlm7j+FPO0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Akshat Verma/Desktop/Practice/react/react_tut/src/App.jsx"],"names":["React","useState","App","fullName","setFullName","fName","lName","email","phone","inputEvent","event","value","name","target","prevValue","displayName","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC;AACrCI,IAAAA,KAAK,EAAE,EAD8B;AAErCC,IAAAA,KAAK,EAAE,EAF8B;AAGrCC,IAAAA,KAAK,EAAE,EAH8B;AAIrCC,IAAAA,KAAK,EAAE;AAJ8B,GAAD,CAAxC;;AAOA,QAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1B;AAEA;AACA;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,KAAK,CAACG,MAA9B,CAL0B,CAM1B;;AAGAT,IAAAA,WAAW,CAAEU,SAAD,IAAe;AACvB,aAAQ,EACJ,GAAGA,SADC;AAEJ,SAACF,IAAD,GAAQD;AAFJ,OAAR,CADuB,CAMvB;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KA3DU,CAAX;AA4DH,GArED;;AAuEA,QAAMI,WAAW,GAAIL,KAAD,IAAW;AAC3BA,IAAAA,KAAK,CAACM,cAAN;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI;AAAA,2BAAWb,QAAQ,CAACE,KAApB,OAA4BF,QAAQ,CAACG,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,sBAAKH,QAAQ,CAACI,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,sBAAKJ,QAAQ,CAACK,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAM,MAAA,QAAQ,EAAEO,WAAhB;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,WAAW,EAAC,iBAA5C;AAA8D,QAAA,QAAQ,EAAEN;AAAxE;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,WAAW,EAAC,sBAA5C;AAAmE,QAAA,QAAQ,EAAEA;AAA7E;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,IAAI,EAAC,OAAzB;AAAiC,QAAA,WAAW,EAAC,qBAA7C;AAAmE,QAAA,QAAQ,EAAEA;AAA7E;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,IAAI,EAAC,OAA1B;AAAkC,QAAA,WAAW,EAAC,yBAA9C;AAAwE,QAAA,QAAQ,EAAEA;AAAlF;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA,kBADJ;AAcH,CAjGD;;GAAMP,G;;KAAAA,G;AAoGN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst App = () => {\r\n    const [fullName, setFullName] = useState({\r\n        fName: \"\",\r\n        lName: \"\",\r\n        email: \"\",\r\n        phone: \"\"\r\n    });\r\n\r\n    const inputEvent = (event) => {\r\n        // console.log(event.target.value);\r\n\r\n        // const value = event.target.value;\r\n        // const name = event.target.name;\r\n        const { value, name } = event.target;\r\n        // just like we do array destructuring we can also do object destructuring but here then names remain same ie we cant do valuee or naame \r\n\r\n\r\n        setFullName((prevValue) => {\r\n            return ({\r\n                ...prevValue,\r\n                [name]: value\r\n            });\r\n\r\n            //! This is short form of below long code \r\n\r\n            //* In first line\r\n            //* In ...preValue :-   ... means spreadOperator \r\n            // spreadOperator gives the complete value inside that object or array (it works on both)\r\n            // As we know prevValue also contain all the value of object fullName so we use ...prevValue\r\n            // this line helps us to write the return again and again \r\n\r\n            //* now for 2nd line\r\n            //* [name]:value (i didn't undrstnd this exactly)\r\n            //but this lines do the work of if else condition and after if condition satisfies update the value\r\n            // of particular key and send prevValue to rest..\r\n\r\n            //! Note :- we only need to add only these 2 lines no matter how many input elements are there\r\n            //! we just need to add an extra input element and a tag to show the vlaue of that element\r\n            //! like in h1 we so {fullName.fname}\r\n\r\n\r\n\r\n\r\n\r\n            // if (name === 'fName') {\r\n            //     return ({\r\n            //         fName: value,\r\n            //         lName: prevValue.lName,\r\n            //         email: prevValue.email,\r\n            //         phone: prevValue.phone\r\n            //     });\r\n            // }\r\n            // else if (name === 'lName') {\r\n            //     return ({\r\n            //         fName: prevValue.fName,\r\n            //         lName: value,\r\n            //         email: prevValue.email,\r\n            //         phone: prevValue.phone\r\n            //     });\r\n            // }\r\n            // else if (name === 'email') {\r\n            //     return ({\r\n            //         fName: prevValue.fName,\r\n            //         lName: prevValue.lName,\r\n            //         email: value,\r\n            //         phone: prevValue.phone\r\n            //     });\r\n            // }\r\n            // else if (name === 'phone') {\r\n            //     return ({\r\n            //         fName: prevValue.fName,\r\n            //         lName: prevValue.lName,\r\n            //         email: prevValue.email,\r\n            //         phone: value\r\n            //     });\r\n            // }\r\n        });\r\n    }\r\n\r\n    const displayName = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>Hello {fullName.fName} {fullName.lName} </h1>\r\n            <p> {fullName.email} </p>\r\n            <p> {fullName.phone} </p>\r\n            <form onSubmit={displayName} >\r\n                <input type='text' name='fName' placeholder=\"Enter your name\" onChange={inputEvent} />\r\n                <input type='text' name='lName' placeholder=\"Enter your last name\" onChange={inputEvent} />\r\n                <input type='email' name='email' placeholder=\"Enter your Email-id\" onChange={inputEvent} />\r\n                <input type='number' name='phone' placeholder=\"Enter your Phone Number\" onChange={inputEvent} />\r\n                <button type='submit' >Click Me !!</button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}