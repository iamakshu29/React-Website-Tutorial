{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = unesc; // Many thanks for this post which made this migration much easier.\n// https://mathiasbynens.be/notes/css-escapes\n\n/**\n * \n * @param {string} str \n * @returns {[string, number]|undefined}\n */\n\nfunction gobbleHex(str) {\n  var lower = str.toLowerCase();\n  var hex = '';\n  var spaceTerminated = false;\n\n  for (var i = 0; i < 6 && lower[i] !== undefined; i++) {\n    var code = lower.charCodeAt(i); // check to see if we are dealing with a valid hex char [a-f|0-9]\n\n    var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57; // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\n\n    spaceTerminated = code === 32;\n\n    if (!valid) {\n      break;\n    }\n\n    hex += lower[i];\n  }\n\n  if (hex.length === 0) {\n    return undefined;\n  }\n\n  var codePoint = parseInt(hex, 16);\n  var isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF; // Add special case for\n  // \"If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point\"\n  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\n\n  if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {\n    return [\"\\uFFFD\", hex.length + (spaceTerminated ? 1 : 0)];\n  }\n\n  return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];\n}\n\nvar CONTAINS_ESCAPE = /\\\\/;\n\nfunction unesc(str) {\n  var needToProcess = CONTAINS_ESCAPE.test(str);\n\n  if (!needToProcess) {\n    return str;\n  }\n\n  var ret = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      var gobbled = gobbleHex(str.slice(i + 1, i + 7));\n\n      if (gobbled !== undefined) {\n        ret += gobbled[0];\n        i += gobbled[1];\n        continue;\n      } // Retain a pair of \\\\ if double escaped `\\\\\\\\`\n      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\n\n\n      if (str[i + 1] === \"\\\\\") {\n        ret += \"\\\\\";\n        i++;\n        continue;\n      } // if \\\\ is at the end of the string retain it\n      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\n\n\n      if (str.length === i + 1) {\n        ret += str[i];\n      }\n\n      continue;\n    }\n\n    ret += str[i];\n  }\n\n  return ret;\n}\n\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/Akshat Verma/Desktop/Practice/react/react_tut/node_modules/postcss-selector-parser/dist/util/unesc.js"],"names":["exports","__esModule","unesc","gobbleHex","str","lower","toLowerCase","hex","spaceTerminated","i","undefined","code","charCodeAt","valid","length","codePoint","parseInt","isSurrogate","String","fromCodePoint","CONTAINS_ESCAPE","needToProcess","test","ret","gobbled","slice","module","default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = unesc;\n\n// Many thanks for this post which made this migration much easier.\n// https://mathiasbynens.be/notes/css-escapes\n\n/**\n * \n * @param {string} str \n * @returns {[string, number]|undefined}\n */\nfunction gobbleHex(str) {\n  var lower = str.toLowerCase();\n  var hex = '';\n  var spaceTerminated = false;\n\n  for (var i = 0; i < 6 && lower[i] !== undefined; i++) {\n    var code = lower.charCodeAt(i); // check to see if we are dealing with a valid hex char [a-f|0-9]\n\n    var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57; // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\n\n    spaceTerminated = code === 32;\n\n    if (!valid) {\n      break;\n    }\n\n    hex += lower[i];\n  }\n\n  if (hex.length === 0) {\n    return undefined;\n  }\n\n  var codePoint = parseInt(hex, 16);\n  var isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF; // Add special case for\n  // \"If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point\"\n  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\n\n  if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {\n    return [\"\\uFFFD\", hex.length + (spaceTerminated ? 1 : 0)];\n  }\n\n  return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];\n}\n\nvar CONTAINS_ESCAPE = /\\\\/;\n\nfunction unesc(str) {\n  var needToProcess = CONTAINS_ESCAPE.test(str);\n\n  if (!needToProcess) {\n    return str;\n  }\n\n  var ret = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      var gobbled = gobbleHex(str.slice(i + 1, i + 7));\n\n      if (gobbled !== undefined) {\n        ret += gobbled[0];\n        i += gobbled[1];\n        continue;\n      } // Retain a pair of \\\\ if double escaped `\\\\\\\\`\n      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\n\n\n      if (str[i + 1] === \"\\\\\") {\n        ret += \"\\\\\";\n        i++;\n        continue;\n      } // if \\\\ is at the end of the string retain it\n      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\n\n\n      if (str.length === i + 1) {\n        ret += str[i];\n      }\n\n      continue;\n    }\n\n    ret += str[i];\n  }\n\n  return ret;\n}\n\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}